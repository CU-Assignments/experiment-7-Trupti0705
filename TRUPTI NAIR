Easy:-
import java.sql.*;
public class EmployeeDataFetcher {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/your_database"; 
        String user = "root"; 
        String password = "your_password"; 
        String query = "SELECT EmpID, Name, Salary FROM Employee";
        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("Employee Records:");
            while (rs.next()) {
                System.out.println(rs.getInt("EmpID") + " | " + rs.getString("Name") + " | " + rs.getDouble("Salary"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } } }

Medium:-
CREATE TABLE Product (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) NOT NULL,
    Quantity INT NOT NULL
);

import java.sql.*;
import java.util.Scanner;
public class ProductCRUD {
    private static final String URL = "jdbc:mysql://localhost:3306/your_database"; 
    private static final String USER = "your_username"; 
    private static final String PASSWORD = "your_password"; 
    private static Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            conn.setAutoCommit(false);            
            while (true) {
                System.out.println("\n--- Product Management System ---");
                System.out.println("1. Add Product");
                System.out.println("2. View Products");
                System.out.println("3. Update Product");
                System.out.println("4. Delete Product");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");
                
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                
                switch (choice) {
                    case 1: addProduct(conn); break;
                    case 2: viewProducts(conn); break;
                    case 3: updateProduct(conn); break;
                    case 4: deleteProduct(conn); break;
                    case 5:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private static void addProduct(Connection conn) {
        System.out.print("Enter Product Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Price: ");
        double price = scanner.nextDouble();
        System.out.print("Enter Quantity: ");
        int quantity = scanner.nextInt();
        String query = "INSERT INTO Product (ProductName, Price, Quantity) VALUES (?, ?, ?)";        
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, name);
            pstmt.setDouble(2, price);
            pstmt.setInt(3, quantity);
            pstmt.executeUpdate();
            conn.commit(); // Commit transaction
            System.out.println("Product added successfully!");
        } catch (SQLException e) {
            rollbackTransaction(conn);
            e.printStackTrace();
        }
    }
    private static void viewProducts(Connection conn) {
        String query = "SELECT * FROM Product";        
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {        
            System.out.println("\nProductID | ProductName | Price | Quantity");
            System.out.println("------------------------------------------");
            while (rs.next()) {
                System.out.println(rs.getInt("ProductID") + " | " +
                                   rs.getString("ProductName") + " | " +
                                   rs.getDouble("Price") + " | " +
                                   rs.getInt("Quantity"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private static void updateProduct(Connection conn) {
        System.out.print("Enter ProductID to update: ");
        int productId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter new Product Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter new Price: ");
        double price = scanner.nextDouble();
        System.out.print("Enter new Quantity: ");
        int quantity = scanner.nextInt();
        String query = "UPDATE Product SET ProductName = ?, Price = ?, Quantity = ? WHERE ProductID = ?";    
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, name);
            pstmt.setDouble(2, price);
            pstmt.setInt(3, quantity);
            pstmt.setInt(4, productId);
            int rowsUpdated = pstmt.executeUpdate();
            if (rowsUpdated > 0) {
                conn.commit(); 
                System.out.println("Product updated successfully!");
            } else {
                System.out.println("ProductID not found.");
            }
        } catch (SQLException e) {
            rollbackTransaction(conn);
            e.printStackTrace();
        }
    }
    private static void deleteProduct(Connection conn) {
        System.out.print("Enter ProductID to delete: ");
        int productId = scanner.nextInt();

        String query = "DELETE FROM Product WHERE ProductID = ?"; 
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, productId);
            int rowsDeleted = pstmt.executeUpdate();
            if (rowsDeleted > 0) {
                conn.commit(); // Commit transaction
                System.out.println("Product deleted successfully!");
            } else {
                System.out.println("ProductID not found.");
            }
        } catch (SQLException e) {
            rollbackTransaction(conn);
            e.printStackTrace();
        }
    }
    private static void rollbackTransaction(Connection conn) {
        try {
            conn.rollback();
            System.out.println("Transaction rolled back due to an error.");
        } catch (SQLException e) {
            e.printStackTrace();
        } } }

Hard:-
CREATE TABLE Student (
    StudentID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Department VARCHAR(50) NOT NULL,
    Marks FLOAT NOT NULL
);

public class Student {
    private int studentID;
    private String name;
    private String department;
    private float marks;
    public Student(int studentID, String name, String department, float marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }
    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }
    public float getMarks() { return marks; }
    public void setMarks(float marks) { this.marks = marks; }
    public String toString() {
        return studentID + " | " + name + " | " + department + " | " + marks;
    }
}

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
public class DatabaseConfig {
    private static final String URL = "jdbc:mysql://localhost:3306/your_database"; // Change DB name
    private static final String USER = "your_username"; // Change username
    private static final String PASSWORD = "your_password"; // Change password
    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAO {    
    public void addStudent(Student student) {
        String query = "INSERT INTO Student (Name, Department, Marks) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConfig.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setFloat(3, student.getMarks());
            pstmt.executeUpdate();
            System.out.println("Student added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String query = "SELECT * FROM Student";
        try (Connection conn = DatabaseConfig.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                students.add(new Student(
                    rs.getInt("StudentID"),
                    rs.getString("Name"),
                    rs.getString("Department"),
                    rs.getFloat("Marks")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return students;
    }

    public void updateStudent(Student student) {
        String query = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (Connection conn = DatabaseConfig.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setFloat(3, student.getMarks());
            pstmt.setInt(4, student.getStudentID());
            int rows = pstmt.executeUpdate();
            if (rows > 0) System.out.println("Student updated successfully!");
            else System.out.println("Student not found.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public void deleteStudent(int studentID) {
        String query = "DELETE FROM Student WHERE StudentID = ?";
        try (Connection conn = DatabaseConfig.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, studentID);
            int rows = pstmt.executeUpdate();
            if (rows > 0) System.out.println("Student deleted successfully!");
            else System.out.println("Student not found.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
import java.util.List;
public class StudentView {
    public void displayStudents(List<Student> students) {
        System.out.println("\nStudentID | Name | Department | Marks");
        System.out.println("--------------------------------------");
        for (Student student : students) {
            System.out.println(student);
        }
    }
}

import java.util.Scanner;
public class StudentController {
    private StudentDAO studentDAO = new StudentDAO();
    private StudentView studentView = new StudentView();
    private Scanner scanner = new Scanner(System.in);
    public void start() {
        while (true) {
            System.out.println("\n--- Student Management System ---");
            System.out.println("1. Add Student");
            System.out.println("2. View Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");    
            int choice = scanner.nextInt();
            scanner.nextLine(); 
            switch (choice) {
                case 1: addStudent(); break;
                case 2: viewStudents(); break;
                case 3: updateStudent(); break;
                case 4: deleteStudent(); break;
                case 5: System.out.println("Exiting..."); return;
                default: System.out.println("Invalid choice. Try again.");
            }
        }
    }
    private void addStudent() {
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Department: ");
        String department = scanner.nextLine();
        System.out.print("Enter Marks: ");
        float marks = scanner.nextFloat();
        studentDAO.addStudent(new Student(0, name, department, marks));
    }
    private void viewStudents() {
        studentView.displayStudents(studentDAO.getAllStudents());
    }
    private void updateStudent() {
        System.out.print("Enter StudentID to update: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter New Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter New Department: ");
        String department = scanner.nextLine();
        System.out.print("Enter New Marks: ");
        float marks = scanner.nextFloat();
        studentDAO.updateStudent(new Student(id, name, department, marks));
    }
    private void deleteStudent() {
        System.out.print("Enter StudentID to delete: ");
        int id = scanner.nextInt();
        studentDAO.deleteStudent(id);
    }
}

public class Main {
    public static void main(String[] args) {
        StudentController controller = new StudentController();
        controller.start();
    }
}








